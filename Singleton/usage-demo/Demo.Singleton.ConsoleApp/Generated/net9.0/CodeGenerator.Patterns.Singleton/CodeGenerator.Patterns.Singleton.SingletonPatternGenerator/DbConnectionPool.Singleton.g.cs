// <auto-generated />
#nullable enable
using System;
using System.Threading;

namespace Demo.Singleton.ConsoleApp;

partial class DbConnectionPool
{
    private static volatile DbConnectionPool? _instance;
    private static int _isInitialized = 0;

    public static DbConnectionPool Instance
    {
        get
        {
            if (_instance != null) return _instance; // Fast path
            return GetOrCreateInstance();
        }
    }

    private static DbConnectionPool GetOrCreateInstance()
    {
        if (Interlocked.CompareExchange(ref _isInitialized, 1, 0) == 0)
        {
            // We won the race - create the instance
            var newInstance = CreateSingletonInstance();
            Interlocked.Exchange(ref _instance, newInstance); // Atomic assignment with memory barrier
        }
        else
        {
            // Another thread is creating the instance - spin wait
            SpinWait.SpinUntil(() => _instance != null);
        }
        return _instance!;
    }

    private static DbConnectionPool CreateSingletonInstance()
    {
        var instance = CreateInstance();
        return instance;
    }
}
