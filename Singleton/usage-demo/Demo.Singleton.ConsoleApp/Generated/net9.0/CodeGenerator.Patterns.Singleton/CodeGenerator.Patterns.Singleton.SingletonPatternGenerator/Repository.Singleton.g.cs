// <auto-generated />
#nullable enable
using System;
using System.Threading;

namespace Demo.Singleton.ConsoleApp;

partial class Repository<T>
    where T : class, new()
{
    private static volatile Repository<T>? _instance;
    private static readonly object _lock = new object();

    public static Repository<T> Instance
    {
        get
        {
            if (_instance != null) return _instance; // Fast path

            lock (_lock)
            {
                if (_instance == null) // Double check inside lock
                {
                    _instance = CreateSingletonInstance();
                }
            }
            return _instance;
        }
    }

    private static Repository<T> CreateSingletonInstance()
    {
        var instance = new Repository<T>();
        instance.Initialize();
        return instance;
    }
}
