// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;

namespace Demo.Builder.ConsoleApp.SampleModels
{
    public sealed class DatabaseConfigBuilder
    {
        private string _connectionString = "";
        private bool _connectionStringSet = false;
        private System.TimeSpan _commandTimeout;
        private int _maxPoolSize;
        private bool _enableRetry;
        private List<string> _tags = new();

        private DatabaseConfigBuilder() { }

        public static DatabaseConfigBuilder Create() => new();

        public static DatabaseConfigBuilder From(DatabaseConfig source) => new()
        {
            _connectionString = source.ConnectionString,
            _connectionStringSet = true,
            _commandTimeout = source.CommandTimeout,
            _maxPoolSize = source.MaxPoolSize,
            _enableRetry = source.EnableRetry,
            _tags = source.Tags?.ToList() ?? new(),
        };

        public DatabaseConfigBuilder WithConnectionString(string connectionString)
        {
            if (connectionString == null)
                throw new ArgumentNullException(nameof(connectionString));

            _connectionString = connectionString;
            _connectionStringSet = true;
            return this;
        }

        public DatabaseConfigBuilder WithCommandTimeout(System.TimeSpan commandTimeout)
        {
            if (!DatabaseConfig.ValidateTimeout(commandTimeout))
                throw new ArgumentException("CommandTimeout validation failed", nameof(commandTimeout));

            _commandTimeout = commandTimeout;
            return this;
        }

        public DatabaseConfigBuilder WithPoolSize(int maxPoolSize)
        {
            _maxPoolSize = maxPoolSize;
            return this;
        }

        public DatabaseConfigBuilder WithEnableRetry(bool enableRetry)
        {
            _enableRetry = enableRetry;
            return this;
        }

        public DatabaseConfigBuilder AddTag(string tag)
        {
            if (tag == null) throw new ArgumentNullException(nameof(tag));
            _tags.Add(tag);
            return this;
        }

        public DatabaseConfigBuilder AddTags(IEnumerable<string> tags)
        {
            if (tags == null) throw new ArgumentNullException(nameof(tags));
            _tags.AddRange(tags);
            return this;
        }

        public DatabaseConfigBuilder ClearTags()
        {
            _tags.Clear();
            return this;
        }

        public int TagsCount => _tags.Count;

        public DatabaseConfig Build()
        {
            if (!_connectionStringSet)
                throw new InvalidOperationException("Required property 'ConnectionString' has not been set");

            return new DatabaseConfig(
                _connectionString,
                _commandTimeout,
                _maxPoolSize,
                _enableRetry,
                _tags.ToList()
            );
        }

        public bool CanBuild() =>
            _connectionStringSet;

        public IEnumerable<string> GetMissingRequiredProperties()
        {
            if (!_connectionStringSet) yield return nameof(DatabaseConfig.ConnectionString);
        }

    }

    public static class DatabaseConfigExtensions
    {
        public static DatabaseConfigBuilder ToBuilder(this DatabaseConfig source) =>
            DatabaseConfigBuilder.From(source);
    }
}
