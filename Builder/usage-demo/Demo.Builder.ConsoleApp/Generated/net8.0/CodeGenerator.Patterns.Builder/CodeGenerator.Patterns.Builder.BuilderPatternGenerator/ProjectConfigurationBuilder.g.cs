// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;

namespace Demo.Builder.ConsoleApp.SampleModels
{
    public sealed class ProjectConfigurationBuilder
    {
        private string _name;
        private bool _nameSet = false;
        private string? _description;
        private List<string> _dependencies = new();
        private List<string> _tags = new();
        private System.Version _version;
        private System.Collections.Generic.Dictionary<string, string> _metadata;

        private ProjectConfigurationBuilder() { }

        public static ProjectConfigurationBuilder Create() => new();

        public static ProjectConfigurationBuilder From(ProjectConfiguration source) => new()
        {
            _name = source.Name,
            _nameSet = true,
            _description = source.Description,
            _dependencies = source.Dependencies?.ToList() ?? new(),
            _tags = source.Tags?.ToList() ?? new(),
            _version = source.Version,
            _metadata = source.Metadata,
        };

        public ProjectConfigurationBuilder WithName(string name)
        {
            _name = name;
            _nameSet = true;
            return this;
        }

        public ProjectConfigurationBuilder WithDescription(string? description)
        {
            _description = description;
            return this;
        }

        public ProjectConfigurationBuilder WithVersion(System.Version version)
        {
            if (!ProjectConfiguration.ValidateVersion(version))
                throw new ArgumentException("Version validation failed", nameof(version));

            _version = version;
            return this;
        }

        public ProjectConfigurationBuilder WithMetadata(System.Collections.Generic.Dictionary<string, string> metadata)
        {
            _metadata = metadata ?? new();
            return this;
        }

        public ProjectConfigurationBuilder AddMetadata(string key, string value)
        {
            _metadata[key] = value;
            return this;
        }

        public ProjectConfigurationBuilder ClearMetadata()
        {
            _metadata.Clear();
            return this;
        }

        public ProjectConfigurationBuilder AddDependency(string dependencie)
        {
            if (dependencie == null) throw new ArgumentNullException(nameof(dependencie));
            _dependencies.Add(dependencie);
            return this;
        }

        public ProjectConfigurationBuilder AddDependencies(IEnumerable<string> dependencies)
        {
            if (dependencies == null) throw new ArgumentNullException(nameof(dependencies));
            _dependencies.AddRange(dependencies);
            return this;
        }

        public ProjectConfigurationBuilder ClearDependencies()
        {
            _dependencies.Clear();
            return this;
        }

        public int DependenciesCount => _dependencies.Count;

        public ProjectConfigurationBuilder AddTag(string tag)
        {
            if (tag == null) throw new ArgumentNullException(nameof(tag));
            _tags.Add(tag);
            return this;
        }

        public ProjectConfigurationBuilder AddTags(IEnumerable<string> tags)
        {
            if (tags == null) throw new ArgumentNullException(nameof(tags));
            _tags.AddRange(tags);
            return this;
        }

        public ProjectConfigurationBuilder ClearTags()
        {
            _tags.Clear();
            return this;
        }

        public int TagsCount => _tags.Count;

        public ProjectConfiguration Build()
        {
            if (!_nameSet)
                throw new InvalidOperationException("Required property 'Name' has not been set");

            return new ProjectConfiguration
            {
                Name = _name,
                Description = _description,
                Dependencies = _dependencies.AsReadOnly(),
                Tags = _tags.ToList(),
                Version = _version,
                Metadata = _metadata,
            };
        }

        public bool CanBuild() =>
            _nameSet;

        public IEnumerable<string> GetMissingRequiredProperties()
        {
            if (!_nameSet) yield return nameof(ProjectConfiguration.Name);
        }

    }

    public static class ProjectConfigurationExtensions
    {
        public static ProjectConfigurationBuilder ToBuilder(this ProjectConfiguration source) =>
            ProjectConfigurationBuilder.From(source);
    }
}
