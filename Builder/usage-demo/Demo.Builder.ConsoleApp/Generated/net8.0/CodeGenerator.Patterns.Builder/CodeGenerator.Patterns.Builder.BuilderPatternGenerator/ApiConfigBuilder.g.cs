// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;

namespace Demo.Builder.ConsoleApp.SampleModels
{
    public sealed class ApiConfigBuilder
    {
        private string _baseUrl;
        private bool _baseUrlSet = false;
        private System.TimeSpan _timeout;
        private Demo.Builder.ConsoleApp.SampleModels.AuthenticationType _authType;
        private string? _apiKey;
        private string? _username;
        private string? _password;
        private List<string> _defaultHeaders = new();
        private int _retryAttempts = 3;

        private ApiConfigBuilder() { }

        public static ApiConfigBuilder Create() => new();

        public static ApiConfigBuilder From(ApiClientConfig source) => new()
        {
            _baseUrl = source.BaseUrl,
            _baseUrlSet = true,
            _timeout = source.Timeout,
            _authType = source.AuthType,
            _apiKey = source.ApiKey,
            _username = source.Username,
            _password = source.Password,
            _defaultHeaders = source.DefaultHeaders?.ToList() ?? new(),
            _retryAttempts = source.RetryAttempts,
        };

        public ApiConfigBuilder WithBaseUrl(string baseUrl)
        {
            _baseUrl = baseUrl;
            _baseUrlSet = true;
            return this;
        }

        public ApiConfigBuilder WithTimeout(System.TimeSpan timeout)
        {
            _timeout = timeout;
            return this;
        }

        public ApiConfigBuilder WithAuthType(Demo.Builder.ConsoleApp.SampleModels.AuthenticationType authType)
        {
            _authType = authType;
            return this;
        }

        public ApiConfigBuilder WithApiKey(string? apiKey)
        {
            _apiKey = apiKey;
            return this;
        }

        public ApiConfigBuilder WithUsername(string? username)
        {
            _username = username;
            return this;
        }

        public ApiConfigBuilder WithPassword(string? password)
        {
            _password = password;
            return this;
        }

        public ApiConfigBuilder WithRetryAttempts(int retryAttempts)
        {
            _retryAttempts = retryAttempts;
            return this;
        }

        public ApiConfigBuilder AddDefaultHeader(string defaultHeader)
        {
            if (defaultHeader == null) throw new ArgumentNullException(nameof(defaultHeader));
            _defaultHeaders.Add(defaultHeader);
            return this;
        }

        public ApiConfigBuilder AddDefaultHeaders(IEnumerable<string> defaultHeaders)
        {
            if (defaultHeaders == null) throw new ArgumentNullException(nameof(defaultHeaders));
            _defaultHeaders.AddRange(defaultHeaders);
            return this;
        }

        public ApiConfigBuilder ClearDefaultHeaders()
        {
            _defaultHeaders.Clear();
            return this;
        }

        public int DefaultHeadersCount => _defaultHeaders.Count;

        public ApiClientConfig Build()
        {
            if (!_baseUrlSet)
                throw new InvalidOperationException("Required property 'BaseUrl' has not been set");

            return new ApiClientConfig
            {
                BaseUrl = _baseUrl,
                Timeout = _timeout,
                AuthType = _authType,
                ApiKey = _apiKey,
                Username = _username,
                Password = _password,
                DefaultHeaders = _defaultHeaders.AsReadOnly(),
                RetryAttempts = _retryAttempts,
            };
        }

        public bool CanBuild() =>
            _baseUrlSet;

        public IEnumerable<string> GetMissingRequiredProperties()
        {
            if (!_baseUrlSet) yield return nameof(ApiClientConfig.BaseUrl);
        }

    }

    public static class ApiClientConfigExtensions
    {
        public static ApiConfigBuilder ToBuilder(this ApiClientConfig source) =>
            ApiConfigBuilder.From(source);
    }
}
