// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;

namespace Demo.Builder.ConsoleApp.SampleModels
{
    public sealed class UserBuilder
    {
        private string _email;
        private string _firstName;
        private bool _firstNameSet = false;
        private string? _lastName;
        private bool _isActive = false;
        private int _age;

        private UserBuilder() { }

        public static UserBuilder Create() => new();

        public static UserBuilder From(User source) => new()
        {
            _email = source.Email,
            _firstName = source.FirstName,
            _firstNameSet = true,
            _lastName = source.LastName,
            _isActive = source.IsActive,
            _age = source.Age,
        };

        public UserBuilder WithEmail(string email)
        {
            _email = email;
            return this;
        }

        public UserBuilder WithFirstName(string firstName)
        {
            _firstName = firstName;
            _firstNameSet = true;
            return this;
        }

        public UserBuilder WithLastName(string? lastName)
        {
            _lastName = lastName;
            return this;
        }

        public UserBuilder WithIsActive(bool isActive)
        {
            _isActive = isActive;
            return this;
        }

        public UserBuilder WithAge(int age)
        {
            if (!User.ValidateAge(age))
                throw new ArgumentException("Age validation failed", nameof(age));

            _age = age;
            return this;
        }

        public User Build()
        {
            if (!_firstNameSet)
                throw new InvalidOperationException("Required property 'FirstName' has not been set");

            return new User
            {
                Email = _email,
                FirstName = _firstName,
                LastName = _lastName,
                IsActive = _isActive,
                Age = _age,
            };
        }

        public bool CanBuild() =>
            _firstNameSet;

        public IEnumerable<string> GetMissingRequiredProperties()
        {
            if (!_firstNameSet) yield return nameof(User.FirstName);
        }

    }

    public static class UserExtensions
    {
        public static UserBuilder ToBuilder(this User source) =>
            UserBuilder.From(source);
    }
}
