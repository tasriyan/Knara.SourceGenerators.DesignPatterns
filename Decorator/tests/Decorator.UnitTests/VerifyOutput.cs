using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

namespace CodeGenerator.Patterns.Decorator.Tests;

public class VerifyOutput
{
    [Fact]
    public async Task Then_the_expected_output_is_generated()
    {
        var generator = new DecoratorFactoryGenerator();
        var syntaxTree = CSharpSyntaxTree.ParseText(GetResourceAsString("Address.cs"));
        var compilation = CSharpCompilation.Create(
            nameof(Then_the_expected_output_is_generated),
            [syntaxTree],
            [MetadataReference.CreateFromFile(typeof(object).Assembly.Location)]);
        var driver = CSharpGeneratorDriver.Create(generator)
            .RunGenerators(compilation);
        var result = driver.GetRunResult();
        var output = result.GeneratedTrees.Single(t =>
            t.FilePath.EndsWith("Address.g.cs")).ToString();

        var settings = new VerifySettings();
        settings.ScrubLinesContaining("This code was generated by DecoratorFactoryGenerator");
        settings.UseDirectory("Verify");
        await Verify(output, settings);
    }
    
    private string GetResourceAsString(string resourceName)  
    {
        var assembly = typeof(VerifyOutput).Assembly;
        var manifestResourceNames = assembly.GetManifestResourceNames();  
        resourceName = manifestResourceNames.Single(x => x.Equals($"Decorator.UnitTests.{resourceName}", StringComparison.OrdinalIgnoreCase));  
  
        using var stream = assembly.GetManifestResourceStream(resourceName) ?? throw new InvalidOperationException($"Resource '{resourceName}' not found.");  
        using var reader = new StreamReader(stream);  
  
        return reader.ReadToEnd();  
    }    
}